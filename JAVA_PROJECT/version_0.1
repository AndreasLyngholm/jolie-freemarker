package dk.simpleconcept.freemaker;

import jolie.runtime.Value;
import jolie.runtime.JavaService;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;

import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class Freemaker extends JavaService
{
    public Value Parse( Value request ) {
    	
    	String input_path = request.getFirstChild( "input_path" ).strValue();
    	String output_path = request.getFirstChild( "output_path" ).strValue();
    	    	
    	String raw_data = request.getFirstChild( "data" ).strValue();
    	
    	JSONParser parser = new JSONParser();
    	
    	Object data = null;
    	try {
    		data = parser.parse(raw_data);
            
            System.out.println(data);
            
    	} catch(ParseException pe) {
    		
            System.out.println("position: " + pe.getPosition());
            System.out.println(pe);
         }
    	
    	
    	Configuration cfg = new Configuration(Configuration.VERSION_2_3_31);
		cfg.setClassForTemplateLoading(Freemaker.class, "/");
		
		try {
			cfg.setDirectoryForTemplateLoading(new File(input_path));
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		File[] files = new File(input_path).listFiles();
		
		for (File file : files) {
			if(this.getExtension(file.getName()).equals(Optional.of("tol"))) {
				try {
					//Load template from source folder
					Template template = cfg.getTemplate(file.getName());
					
					// File output
					Writer new_file = new FileWriter (new File(output_path + file.getName().replace("tol", "html")));
					template.process(data, new_file);
					new_file.flush();
					new_file.close();
					
				} catch (IOException e) {
					e.printStackTrace();
				} catch (TemplateException e) {
					e.printStackTrace();
				}
			}
		}
    	
        
    	Value response = Value.create();
        response.getFirstChild( "response" ).setValue( "Success" );
        return response;
    }
    
    public Optional<String> getExtension(String filename) {
        return Optional.ofNullable(filename)
          .filter(f -> f.contains("."))
          .map(f -> f.substring(filename.lastIndexOf(".") + 1));
    }
}